package types

// OpenAIMessage represents a single message in a chat completion request or response.
type OpenAIMessage struct {
	Role    string `json:"role"`
	Content any    `json:"content"` // Can be string or []OpenAIContentPart for requests
	// For responses, Content is typically string, or null if tool_calls are present.
	Name       string           `json:"name,omitempty"`
	ToolCalls  []OpenAIToolCall `json:"tool_calls,omitempty"`   // Used in assistant responses
	ToolCallID string           `json:"tool_call_id,omitempty"` // Used in tool messages
}

// OpenAIContentPart represents a part of a multi-modal message content.
type OpenAIContentPart struct {
	Type     string          `json:"type"` // e.g., "text", "image_url"
	Text     string          `json:"text,omitempty"`
	ImageURL *OpenAIImageURL `json:"image_url,omitempty"`
}

// OpenAIImageURL details for an image URL content part.
type OpenAIImageURL struct {
	URL    string `json:"url"`              // URL of the image or a data URI
	Detail string `json:"detail,omitempty"` // "auto", "low", "high"
}

// OpenAIToolCall represents a tool call requested by the model.
type OpenAIToolCall struct {
	ID       string             `json:"id"`
	Type     string             `json:"type"` // Typically "function"
	Function OpenAIFunctionCall `json:"function"`
}

// OpenAIFunctionCall represents the function call details.
type OpenAIFunctionCall struct {
	Name      string `json:"name"`
	Arguments string `json:"arguments"` // JSON string of arguments
}

// OpenAIFunctionParameters defines the structure for function parameters (JSON schema).
type OpenAIFunctionParameters struct {
	Type       string                 `json:"type"` // Typically "object"
	Properties map[string]interface{} `json:"properties"`
	Required   []string               `json:"required,omitempty"`
}

// OpenAIFunctionTool represents the function definition within a tool.
type OpenAIFunctionTool struct {
	Name        string                   `json:"name"`
	Description string                   `json:"description,omitempty"`
	Parameters  OpenAIFunctionParameters `json:"parameters"` // JSON Schema object
}

// OpenAITool represents a tool definition that can be provided to the model.
type OpenAITool struct {
	Type     string             `json:"type"` // Typically "function"
	Function OpenAIFunctionTool `json:"function"`
}

// OpenAIChatCompletionRequest is the structure for a chat completion request to the OpenAI API.
type OpenAIChatCompletionRequest struct {
	Model               string          `json:"model"`
	Messages            []OpenAIMessage `json:"messages"`
	Temperature         float64         `json:"temperature,omitempty"`
	TopP                float64         `json:"top_p,omitempty"`
	N                   int             `json:"n,omitempty"`
	Stream              bool            `json:"stream,omitempty"`
	Stop                any             `json:"stop,omitempty"`                  // string or []string
	MaxTokens           *int            `json:"max_tokens,omitempty"`            // Deprecated by OpenAI but some clients might send
	MaxCompletionTokens *int            `json:"max_completion_tokens,omitempty"` // Preferred
	PresencePenalty     float64         `json:"presence_penalty,omitempty"`
	FrequencyPenalty    float64         `json:"frequency_penalty,omitempty"`
	LogitBias           map[string]int  `json:"logit_bias,omitempty"` // Map of token ID to bias value
	User                string          `json:"user,omitempty"`       // Unique identifier for the end-user
	Tools               []OpenAITool    `json:"tools,omitempty"`
	ToolChoice          any             `json:"tool_choice,omitempty"` // string or object
	ResponseFormat      *ResponseFormat `json:"response_format,omitempty"`
	Seed                *int            `json:"seed,omitempty"`
	LogProbs            bool            `json:"logprobs,omitempty"`
	TopLogProbs         *int            `json:"top_logprobs,omitempty"`
}

// ResponseFormat specifies the format of the response, e.g., JSON mode.
type ResponseFormat struct {
	Type string `json:"type"` // e.g., "json_object"
}

// OpenAIResponseMessage is the structure for a message in a chat completion response.
type OpenAIResponseMessage struct {
	Role      string           `json:"role"`
	Content   *string          `json:"content"` // Null if tool_calls is present
	ToolCalls []OpenAIToolCall `json:"tool_calls,omitempty"`
}

// OpenAIChoice represents one of the choices generated by the model.
type OpenAIChoice struct {
	Index        int                   `json:"index"`
	Message      OpenAIResponseMessage `json:"message"`
	FinishReason string                `json:"finish_reason"` // e.g., "stop", "length", "tool_calls"
	LogProbs     *OpenAILogProbs       `json:"logprobs,omitempty"`
}

// OpenAILogProbs contains log probability information.
type OpenAILogProbs struct {
	Content []OpenAITokenLogProb `json:"content,omitempty"`
}

// OpenAITokenLogProb represents log probability information for a token.
type OpenAITokenLogProb struct {
	Token       string       `json:"token"`
	LogProb     float64      `json:"logprob"`
	Bytes       []int        `json:"bytes,omitempty"` // List of UTF-8 byte values
	TopLogProbs []TopLogProb `json:"top_logprobs,omitempty"`
}

// TopLogProb represents one of the top log probabilities for a token.
type TopLogProb struct {
	Token   string  `json:"token"`
	LogProb float64 `json:"logprob"`
	Bytes   []int   `json:"bytes,omitempty"`
}

// OpenAIUsage provides token usage statistics for a chat completion request.
type OpenAIUsage struct {
	PromptTokens     int `json:"prompt_tokens"`
	CompletionTokens int `json:"completion_tokens"`
	TotalTokens      int `json:"total_tokens"`
}

// OpenAIChatCompletionResponse is the structure for a response from the OpenAI API.
type OpenAIChatCompletionResponse struct {
	ID                string         `json:"id"`
	Object            string         `json:"object"`  // e.g., "chat.completion"
	Created           int64          `json:"created"` // Unix timestamp
	Model             string         `json:"model"`
	Choices           []OpenAIChoice `json:"choices"`
	Usage             *OpenAIUsage   `json:"usage,omitempty"`
	SystemFingerprint string         `json:"system_fingerprint,omitempty"`
}

// OpenAIStreamChoice is used for streaming responses.
type OpenAIStreamChoice struct {
	Index        int             `json:"index"`
	Delta        OpenAIMessage   `json:"delta"` // Role, Content (partial)
	FinishReason *string         `json:"finish_reason,omitempty"`
	LogProbs     *OpenAILogProbs `json:"logprobs,omitempty"`
}

// OpenAIChatCompletionChunk is the structure for a streamed chunk of a chat completion.
type OpenAIChatCompletionChunk struct {
	ID                string               `json:"id"`
	Object            string               `json:"object"` // e.g., "chat.completion.chunk"
	Created           int64                `json:"created"`
	Model             string               `json:"model"`
	Choices           []OpenAIStreamChoice `json:"choices"`
	Usage             *OpenAIUsage         `json:"usage,omitempty"` // Only in the last chunk if stream_options.include_usage is true
	SystemFingerprint string               `json:"system_fingerprint,omitempty"`
}
